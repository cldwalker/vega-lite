digraph DataFlow {
  rankdir = TB;
  node [shape=record]
    "43" [
    label = <Source>;
    tooltip = "[43]&#010;undefined"
  ]
  "44" [
    label = <Identifier<br/><font color="grey" point-size="10">OUT:</font> _vgsid_>;
    tooltip = "[44]&#010;Identifier"
  ]
  "45" [
    label = <JoinAggregateTransform<br/><font color="grey" point-size="10">IN:</font> a, x<br/><font color="grey" point-size="10">OUT:</font> median_x_by_a>;
    tooltip = "[45]&#010;JoinAggregateTransform {groupby:[a],joinaggregate:[{as:median_x_by_a,field:x,op:median}]}"
  ]
  "46" [
    label = <JoinAggregateTransform<br/><font color="grey" point-size="10">IN:</font> b, y<br/><font color="grey" point-size="10">OUT:</font> median_y_by_b>;
    tooltip = "[46]&#010;JoinAggregateTransform {groupby:[b],joinaggregate:[{as:median_y_by_b,field:y,op:median}]}"
  ]
  "47" [
    label = <Calculate<br/><font color="grey" point-size="10">IN:</font> a<br/><font color="grey" point-size="10">OUT:</font> column_a_sort_index>;
    tooltip = "[47]&#010;Calculate {as:column_a_sort_index,calculate:datum[\a\]===\B\ ? 0 : datum[\a\]===\C\ ? 1 : datum[\a\]===\A\ ? 2 : 3}"
  ]
  "48" [
    label = <Calculate<br/><font color="grey" point-size="10">IN:</font> b<br/><font color="grey" point-size="10">OUT:</font> row_b_sort_index>;
    tooltip = "[48]&#010;Calculate {as:row_b_sort_index,calculate:datum[\b\]===\Y\ ? 0 : datum[\b\]===\X\ ? 1 : datum[\b\]===\Z\ ? 2 : 3}"
  ]
  "49" [
    label = <Output<br/><i>raw</i><br/><font color="grey" point-size="10">required:</font> false>;
    tooltip = "[49]&#010;Output 50"
  ]
  "51" [
    label = <Output<br/><i>main</i><br/><font color="grey" point-size="10">required:</font> true>;
    tooltip = "[51]&#010;Output 52"
  ]
  "53" [
    label = <Facet<br/><font color="grey" point-size="10">IN:</font> b, a, row_b_sort_index, column_a_sort_index>;
    tooltip = "[53]&#010;Facet r:{fields:[b],name:row_domain,sortIndexField:row_b_sort_index} c:{fields:[a],name:column_domain,sortIndexField:column_a_sort_index}"
  ]
  "54" [
    label = <Identifier<br/><font color="grey" point-size="10">OUT:</font> _vgsid_>;
    tooltip = "[54]&#010;Identifier"
  ]
  "55" [
    label = <Output<br/><i>child_raw</i><br/><font color="grey" point-size="10">required:</font> false>;
    tooltip = "[55]&#010;Output 56"
  ]
  "57" [
    label = <Output<br/><i>child_main</i><br/><font color="grey" point-size="10">required:</font> false>;
    tooltip = "[57]&#010;Output 58"
  ]
  "59" [
    label = <Identifier<br/><font color="grey" point-size="10">OUT:</font> _vgsid_>;
    tooltip = "[59]&#010;Identifier"
  ]
  "60" [
    label = <Output<br/><i>child_layer_0_raw</i><br/><font color="grey" point-size="10">required:</font> false>;
    tooltip = "[60]&#010;Output 61"
  ]
  "62" [
    label = <FilterInvalid<br/><font color="grey" point-size="10">IN:</font> x, y>;
    tooltip = "[62]&#010;FilterInvalid {x:{field:x,title:x,type:quantitative},y:{field:y,title:y,type:quantitative}}"
  ]
  "63" [
    label = <Output<br/><i>child_layer_0_main</i><br/><font color="grey" point-size="10">required:</font> true>;
    tooltip = "[63]&#010;Output 64"
  ]
  "65" [
    label = <Identifier<br/><font color="grey" point-size="10">OUT:</font> _vgsid_>;
    tooltip = "[65]&#010;Identifier"
  ]
  "66" [
    label = <Output<br/><i>child_layer_1_raw</i><br/><font color="grey" point-size="10">required:</font> false>;
    tooltip = "[66]&#010;Output 67"
  ]
  "68" [
    label = <Aggregate<br/><font color="grey" point-size="10">IN:</font> median_x_by_a<br/><font color="grey" point-size="10">OUT:</font> median_median_x_by_a>;
    tooltip = "[68]&#010;Aggregate {dimensions:Set(),measures:{median_x_by_a:{median:Set(\median_median_x_by_a\)}}}"
  ]
  "69" [
    label = <FilterInvalid<br/><font color="grey" point-size="10">IN:</font> median_x_by_a>;
    tooltip = "[69]&#010;FilterInvalid {median_x_by_a:{aggregate:median,field:median_x_by_a,type:quantitative}}"
  ]
  "70" [
    label = <Output<br/><i>child_layer_1_main</i><br/><font color="grey" point-size="10">required:</font> true>;
    tooltip = "[70]&#010;Output 71"
  ]
  "72" [
    label = <Identifier<br/><font color="grey" point-size="10">OUT:</font> _vgsid_>;
    tooltip = "[72]&#010;Identifier"
  ]
  "73" [
    label = <Output<br/><i>child_layer_2_raw</i><br/><font color="grey" point-size="10">required:</font> false>;
    tooltip = "[73]&#010;Output 74"
  ]
  "75" [
    label = <Aggregate<br/><font color="grey" point-size="10">IN:</font> median_y_by_b<br/><font color="grey" point-size="10">OUT:</font> median_median_y_by_b>;
    tooltip = "[75]&#010;Aggregate {dimensions:Set(),measures:{median_y_by_b:{median:Set(\median_median_y_by_b\)}}}"
  ]
  "76" [
    label = <FilterInvalid<br/><font color="grey" point-size="10">IN:</font> median_y_by_b>;
    tooltip = "[76]&#010;FilterInvalid {median_y_by_b:{aggregate:median,field:median_y_by_b,type:quantitative}}"
  ]
  "77" [
    label = <Output<br/><i>child_layer_2_main</i><br/><font color="grey" point-size="10">required:</font> true>;
    tooltip = "[77]&#010;Output 78"
  ]

  "43" -> "44" "44" -> "45" "45" -> "46" "46" -> "47" "47" -> "48" "48" -> "49" "49" -> "51" "51" -> "53" "53" -> "54" "54" -> "55" "55" -> "57" "57" -> "59" "59" -> "60" "60" -> "62" "62" -> "63" "57" -> "65" "65" -> "66" "66" -> "68" "68" -> "69" "69" -> "70" "57" -> "72" "72" -> "73" "73" -> "75" "75" -> "76" "76" -> "77"
}
digraph DataFlow {
  rankdir = TB;
  node [shape=record]
    "43" [
    label = <Source>;
    tooltip = "[43]&#010;undefined"
  ]
  "45" [
    label = <JoinAggregateTransform<br/><font color="grey" point-size="10">IN:</font> a, x<br/><font color="grey" point-size="10">OUT:</font> median_x_by_a>;
    tooltip = "[45]&#010;JoinAggregateTransform {groupby:[a],joinaggregate:[{as:median_x_by_a,field:x,op:median}]}"
  ]
  "46" [
    label = <JoinAggregateTransform<br/><font color="grey" point-size="10">IN:</font> b, y<br/><font color="grey" point-size="10">OUT:</font> median_y_by_b>;
    tooltip = "[46]&#010;JoinAggregateTransform {groupby:[b],joinaggregate:[{as:median_y_by_b,field:y,op:median}]}"
  ]
  "47" [
    label = <Calculate<br/><font color="grey" point-size="10">IN:</font> a<br/><font color="grey" point-size="10">OUT:</font> column_a_sort_index>;
    tooltip = "[47]&#010;Calculate {as:column_a_sort_index,calculate:datum[\a\]===\B\ ? 0 : datum[\a\]===\C\ ? 1 : datum[\a\]===\A\ ? 2 : 3}"
  ]
  "48" [
    label = <Calculate<br/><font color="grey" point-size="10">IN:</font> b<br/><font color="grey" point-size="10">OUT:</font> row_b_sort_index>;
    tooltip = "[48]&#010;Calculate {as:row_b_sort_index,calculate:datum[\b\]===\Y\ ? 0 : datum[\b\]===\X\ ? 1 : datum[\b\]===\Z\ ? 2 : 3}"
  ]
  "51" [
    label = <Output<br/><i>main</i><br/><font color="grey" point-size="10">required:</font> true>;
    tooltip = "[51]&#010;Output 52"
  ]
  "53" [
    label = <Facet<br/><font color="grey" point-size="10">IN:</font> b, a, row_b_sort_index, column_a_sort_index>;
    tooltip = "[53]&#010;Facet r:{fields:[b],name:row_domain,sortIndexField:row_b_sort_index} c:{fields:[a],name:column_domain,sortIndexField:column_a_sort_index}"
  ]
  "62" [
    label = <FilterInvalid<br/><font color="grey" point-size="10">IN:</font> x, y>;
    tooltip = "[62]&#010;FilterInvalid {x:{field:x,title:x,type:quantitative},y:{field:y,title:y,type:quantitative}}"
  ]
  "63" [
    label = <Output<br/><i>child_layer_0_main</i><br/><font color="grey" point-size="10">required:</font> true>;
    tooltip = "[63]&#010;Output 64"
  ]
  "69" [
    label = <FilterInvalid<br/><font color="grey" point-size="10">IN:</font> median_x_by_a>;
    tooltip = "[69]&#010;FilterInvalid {median_x_by_a:{aggregate:median,field:median_x_by_a,type:quantitative}}"
  ]
  "70" [
    label = <Output<br/><i>child_layer_1_main</i><br/><font color="grey" point-size="10">required:</font> true>;
    tooltip = "[70]&#010;Output 71"
  ]
  "75" [
    label = <Aggregate<br/><font color="grey" point-size="10">IN:</font> median_y_by_b, median_x_by_a<br/><font color="grey" point-size="10">OUT:</font> median_median_y_by_b, median_median_x_by_a>;
    tooltip = "[75]&#010;Aggregate {dimensions:Set(),measures:{median_x_by_a:{median:Set(\median_median_x_by_a\)},median_y_by_b:{median:Set(\median_median_y_by_b\)}}}"
  ]
  "76" [
    label = <FilterInvalid<br/><font color="grey" point-size="10">IN:</font> median_y_by_b>;
    tooltip = "[76]&#010;FilterInvalid {median_y_by_b:{aggregate:median,field:median_y_by_b,type:quantitative}}"
  ]
  "77" [
    label = <Output<br/><i>child_layer_2_main</i><br/><font color="grey" point-size="10">required:</font> true>;
    tooltip = "[77]&#010;Output 78"
  ]
  "82" [
    label = <FilterInvalid<br/><font color="grey" point-size="10">IN:</font> x, y>;
    tooltip = "[82]&#010;FilterInvalid {x:{field:x,title:x,type:quantitative},y:{field:y,title:y,type:quantitative}}"
  ]
  "83" [
    label = <Output<br/><i>clone_child_layer_0_main</i><br/><font color="grey" point-size="10">required:</font> true>;
    tooltip = "[83]&#010;Output 79"
  ]
  "84" [
    label = <Aggregate<br/><font color="grey" point-size="10">IN:</font> b, a, median_y_by_b, median_x_by_a<br/><font color="grey" point-size="10">OUT:</font> median_median_y_by_b, median_median_x_by_a>;
    tooltip = "[84]&#010;Aggregate {dimensions:Set(\b\,\a\),measures:{median_x_by_a:{median:Set(\median_median_x_by_a\)},median_y_by_b:{median:Set(\median_median_y_by_b\)}}}"
  ]
  "85" [
    label = <FilterInvalid<br/><font color="grey" point-size="10">IN:</font> median_y_by_b>;
    tooltip = "[85]&#010;FilterInvalid {median_y_by_b:{aggregate:median,field:median_y_by_b,type:quantitative}}"
  ]
  "86" [
    label = <Output<br/><i>clone_child_layer_2_main</i><br/><font color="grey" point-size="10">required:</font> true>;
    tooltip = "[86]&#010;Output 80"
  ]
  "87" [
    label = <FilterInvalid<br/><font color="grey" point-size="10">IN:</font> median_x_by_a>;
    tooltip = "[87]&#010;FilterInvalid {median_x_by_a:{aggregate:median,field:median_x_by_a,type:quantitative}}"
  ]
  "88" [
    label = <Output<br/><i>clone_child_layer_1_main</i><br/><font color="grey" point-size="10">required:</font> true>;
    tooltip = "[88]&#010;Output 81"
  ]

  "43" -> "45" "45" -> "46" "46" -> "47" "47" -> "48" "48" -> "51" "51" -> "53" "53" -> "62" "62" -> "63" "53" -> "75" "75" -> "76" "76" -> "77" "75" -> "69" "69" -> "70" "51" -> "82" "82" -> "83" "51" -> "84" "84" -> "85" "85" -> "86" "84" -> "87" "87" -> "88"
}
{ data: 'scale_child_layer_0_main', field: 'x' }
{ data: 'scale_child_layer_1_main', field: 'median_median_x_by_a' }
{ data: 'scale_child_layer_0_main', field: 'y' }
{ data: 'scale_child_layer_2_main', field: 'median_median_y_by_b' }
{
  "$schema": "https://vega.github.io/schema/vega/v5.json",
  "background": "white",
  "padding": 5,
  "data": [
    {
      "name": "source_0",
      "values": [
        {"a": "A", "b": "X", "x": 1, "y": 4},
        {"a": "A", "b": "Y", "x": 3, "y": 5},
        {"a": "A", "b": "Z", "x": 5, "y": 6},
        {"a": "B", "b": "X", "x": 2, "y": 7},
        {"a": "B", "b": "Y", "x": 9, "y": 8},
        {"a": "B", "b": "Z", "x": 8, "y": 9},
        {"a": "C", "b": "X", "x": 7, "y": 1},
        {"a": "C", "b": "Y", "x": 6, "y": 2},
        {"a": "C", "b": "Z", "x": 4, "y": 3}
      ]
    },
    {
      "name": "data_0",
      "source": "source_0",
      "transform": [
        {
          "type": "joinaggregate",
          "as": ["median_x_by_a"],
          "ops": ["median"],
          "fields": ["x"],
          "groupby": ["a"]
        },
        {
          "type": "joinaggregate",
          "as": ["median_y_by_b"],
          "ops": ["median"],
          "fields": ["y"],
          "groupby": ["b"]
        },
        {
          "type": "formula",
          "expr": "datum[\"a\"]===\"B\" ? 0 : datum[\"a\"]===\"C\" ? 1 : datum[\"a\"]===\"A\" ? 2 : 3",
          "as": "column_a_sort_index"
        },
        {
          "type": "formula",
          "expr": "datum[\"b\"]===\"Y\" ? 0 : datum[\"b\"]===\"X\" ? 1 : datum[\"b\"]===\"Z\" ? 2 : 3",
          "as": "row_b_sort_index"
        }
      ]
    },
    {
      "name": "column_domain",
      "source": "data_0",
      "transform": [
        {
          "type": "aggregate",
          "groupby": ["a"],
          "fields": ["column_a_sort_index"],
          "ops": ["max"],
          "as": ["column_a_sort_index"]
        }
      ]
    },
    {
      "name": "row_domain",
      "source": "data_0",
      "transform": [
        {
          "type": "aggregate",
          "groupby": ["b"],
          "fields": ["row_b_sort_index"],
          "ops": ["max"],
          "as": ["row_b_sort_index"]
        }
      ]
    },
    {
      "name": "data_2",
      "source": "data_0",
      "transform": [
        {
          "type": "filter",
          "expr": "isValid(datum[\"x\"]) && isFinite(+datum[\"x\"]) && isValid(datum[\"y\"]) && isFinite(+datum[\"y\"])"
        }
      ]
    },
    {
      "name": "data_3",
      "source": "data_0",
      "transform": [
        {
          "type": "aggregate",
          "groupby": ["b", "a"],
          "ops": ["median", "median"],
          "fields": ["median_y_by_b", "median_x_by_a"],
          "as": ["median_median_y_by_b", "median_median_x_by_a"]
        }
      ]
    },
    {
      "name": "data_4",
      "source": "data_3",
      "transform": [
        {
          "type": "filter",
          "expr": "isValid(datum[\"median_median_y_by_b\"]) && isFinite(+datum[\"median_median_y_by_b\"])"
        }
      ]
    },
    {
      "name": "data_5",
      "source": "data_3",
      "transform": [
        {
          "type": "filter",
          "expr": "isValid(datum[\"median_median_x_by_a\"]) && isFinite(+datum[\"median_median_x_by_a\"])"
        }
      ]
    }
  ],
  "signals": [
    {"name": "child_width", "value": 50},
    {"name": "child_height", "value": 50}
  ],
  "layout": {
    "padding": 20,
    "offset": {"rowTitle": 10, "columnTitle": 10},
    "columns": {"signal": "length(data('column_domain'))"},
    "bounds": "full",
    "align": "all"
  },
  "marks": [
    {
      "name": "row-title",
      "type": "group",
      "role": "row-title",
      "title": {
        "text": "b",
        "orient": "left",
        "style": "guide-title",
        "offset": 10
      }
    },
    {
      "name": "column-title",
      "type": "group",
      "role": "column-title",
      "title": {"text": "a", "style": "guide-title", "offset": 10}
    },
    {
      "name": "row_header",
      "type": "group",
      "role": "row-header",
      "from": {"data": "row_domain"},
      "sort": {"field": "datum[\"row_b_sort_index\"]", "order": "ascending"},
      "title": {
        "text": {
          "signal": "isValid(parent[\"b\"]) ? parent[\"b\"] : \"\"+parent[\"b\"]"
        },
        "orient": "left",
        "style": "guide-label",
        "frame": "group",
        "offset": 10
      },
      "encode": {"update": {"height": {"signal": "child_height"}}},
      "axes": [
        {
          "scale": "y",
          "orient": "left",
          "grid": false,
          "title": "y",
          "labelOverlap": true,
          "tickCount": {"signal": "ceil(child_height/40)"},
          "zindex": 0
        }
      ]
    },
    {
      "name": "column_header",
      "type": "group",
      "role": "column-header",
      "from": {"data": "column_domain"},
      "sort": {"field": "datum[\"column_a_sort_index\"]", "order": "ascending"},
      "title": {
        "text": {
          "signal": "isValid(parent[\"a\"]) ? parent[\"a\"] : \"\"+parent[\"a\"]"
        },
        "style": "guide-label",
        "frame": "group",
        "offset": 10
      },
      "encode": {"update": {"width": {"signal": "child_width"}}}
    },
    {
      "name": "column_footer",
      "type": "group",
      "role": "column-footer",
      "from": {"data": "column_domain"},
      "sort": {"field": "datum[\"column_a_sort_index\"]", "order": "ascending"},
      "encode": {"update": {"width": {"signal": "child_width"}}},
      "axes": [
        {
          "scale": "x",
          "orient": "bottom",
          "grid": false,
          "title": "x",
          "labelFlush": true,
          "labelOverlap": true,
          "tickCount": {"signal": "ceil(child_width/40)"},
          "zindex": 0
        }
      ]
    },
    {
      "name": "cell",
      "type": "group",
      "style": "cell",
      "from": {
        "facet": {
          "name": "facet",
          "data": "data_0",
          "groupby": ["b", "a"],
          "aggregate": {
            "cross": true,
            "fields": ["row_b_sort_index", "column_a_sort_index"],
            "ops": ["max", "max"],
            "as": ["row_b_sort_index", "column_a_sort_index"]
          }
        }
      },
      "sort": {
        "field": [
          "datum[\"row_b_sort_index\"]",
          "datum[\"column_a_sort_index\"]"
        ],
        "order": ["ascending", "ascending"]
      },
      "data": [
        {
          "source": "facet",
          "name": "data_0",
          "transform": [
            {
              "type": "filter",
              "expr": "isValid(datum[\"x\"]) && isFinite(+datum[\"x\"]) && isValid(datum[\"y\"]) && isFinite(+datum[\"y\"])"
            }
          ]
        },
        {
          "source": "facet",
          "name": "data_1",
          "transform": [
            {
              "type": "aggregate",
              "groupby": [],
              "ops": ["median", "median"],
              "fields": ["median_y_by_b", "median_x_by_a"],
              "as": ["median_median_y_by_b", "median_median_x_by_a"]
            }
          ]
        },
        {
          "name": "data_2",
          "source": "data_1",
          "transform": [
            {
              "type": "filter",
              "expr": "isValid(datum[\"median_median_y_by_b\"]) && isFinite(+datum[\"median_median_y_by_b\"])"
            }
          ]
        },
        {
          "name": "data_3",
          "source": "data_1",
          "transform": [
            {
              "type": "filter",
              "expr": "isValid(datum[\"median_median_x_by_a\"]) && isFinite(+datum[\"median_median_x_by_a\"])"
            }
          ]
        }
      ],
      "encode": {
        "update": {
          "width": {"signal": "child_width"},
          "height": {"signal": "child_height"}
        }
      },
      "marks": [
        {
          "name": "child_layer_0_marks",
          "type": "symbol",
          "style": ["point"],
          "from": {"data": "data_0"},
          "encode": {
            "update": {
              "opacity": {"value": 0.7},
              "fill": {"value": "transparent"},
              "stroke": {"value": "#4c78a8"},
              "x": {"scale": "x", "field": "x"},
              "y": {"scale": "y", "field": "y"}
            }
          }
        },
        {
          "name": "child_layer_1_marks",
          "type": "rule",
          "style": ["rule"],
          "from": {"data": "data_3"},
          "encode": {
            "update": {
              "stroke": {"value": "black"},
              "x": {"scale": "x", "field": "median_median_x_by_a"},
              "y": {"value": 0},
              "y2": {"field": {"group": "height"}}
            }
          }
        },
        {
          "name": "child_layer_2_marks",
          "type": "rule",
          "style": ["rule"],
          "from": {"data": "data_2"},
          "encode": {
            "update": {
              "stroke": {"value": "black"},
              "x": {"field": {"group": "width"}},
              "x2": {"value": 0},
              "y": {"scale": "y", "field": "median_median_y_by_b"}
            }
          }
        }
      ],
      "axes": [
        {
          "scale": "x",
          "orient": "bottom",
          "gridScale": "y",
          "grid": true,
          "tickCount": {"signal": "ceil(child_width/40)"},
          "domain": false,
          "labels": false,
          "maxExtent": 0,
          "minExtent": 0,
          "ticks": false,
          "zindex": 0
        },
        {
          "scale": "y",
          "orient": "left",
          "gridScale": "x",
          "grid": true,
          "tickCount": {"signal": "ceil(child_height/40)"},
          "domain": false,
          "labels": false,
          "maxExtent": 0,
          "minExtent": 0,
          "ticks": false,
          "zindex": 0
        }
      ]
    }
  ],
  "scales": [
    {
      "name": "x",
      "type": "linear",
      "domain": {
        "fields": [
          {"data": "data_2", "field": "x"},
          {"data": "data_5", "field": "median_median_x_by_a"}
        ]
      },
      "range": [0, {"signal": "child_width"}],
      "nice": true,
      "zero": true
    },
    {
      "name": "y",
      "type": "linear",
      "domain": {
        "fields": [
          {"data": "data_2", "field": "y"},
          {"data": "data_4", "field": "median_median_y_by_b"}
        ]
      },
      "range": [{"signal": "child_height"}, 0],
      "nice": true,
      "zero": true
    }
  ]
}
