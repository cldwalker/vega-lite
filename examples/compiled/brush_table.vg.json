digraph DataFlow {
  rankdir = TB;
  node [shape=record]
    "43" [
    label = <Source<br/><i>data/cars.json</i>>;
    tooltip = "[43]&#010;data/cars.json"
  ]
  "44" [
    label = <Identifier<br/><font color="grey" point-size="10">OUT:</font> _vgsid_>;
    tooltip = "[44]&#010;Identifier"
  ]
  "45" [
    label = <WindowTransform<br/><font color="grey" point-size="10">OUT:</font> row_number>;
    tooltip = "[45]&#010;WindowTransform {window:[{as:row_number,op:row_number}]}"
  ]
  "46" [
    label = <Output<br/><i>raw</i><br/><font color="grey" point-size="10">required:</font> false>;
    tooltip = "[46]&#010;Output 47"
  ]
  "48" [
    label = <Output<br/><i>main</i><br/><font color="grey" point-size="10">required:</font> false>;
    tooltip = "[48]&#010;Output 49"
  ]
  "50" [
    label = <Identifier<br/><font color="grey" point-size="10">OUT:</font> _vgsid_>;
    tooltip = "[50]&#010;Identifier"
  ]
  "51" [
    label = <Output<br/><i>concat_0_raw</i><br/><font color="grey" point-size="10">required:</font> false>;
    tooltip = "[51]&#010;Output 52"
  ]
  "53" [
    label = <FilterInvalid<br/><font color="grey" point-size="10">IN:</font> Horsepower, Miles_per_Gallon>;
    tooltip = "[53]&#010;FilterInvalid {Horsepower:{field:Horsepower,type:quantitative},Miles_per_Gallon:{field:Miles_per_Gallon,type:quantitative}}"
  ]
  "54" [
    label = <Output<br/><i>concat_0_main</i><br/><font color="grey" point-size="10">required:</font> true>;
    tooltip = "[54]&#010;Output 55"
  ]
  "56" [
    label = <Filter>;
    tooltip = "[56]&#010;Filter !(length(data(brush_store))) || (vlSelectionTest(brush_store, datum))"
  ]
  "57" [
    label = <Output<br/><i>concat_0_lookup_brush</i><br/><font color="grey" point-size="10">required:</font> false>;
    tooltip = "[57]&#010;Output 58"
  ]
  "59" [
    label = <Identifier<br/><font color="grey" point-size="10">OUT:</font> _vgsid_>;
    tooltip = "[59]&#010;Identifier"
  ]
  "60" [
    label = <Filter>;
    tooltip = "[60]&#010;Filter !(length(data(brush_store))) || (vlSelectionTest(brush_store, datum))"
  ]
  "61" [
    label = <WindowTransform<br/><font color="grey" point-size="10">OUT:</font> rank>;
    tooltip = "[61]&#010;WindowTransform {window:[{as:rank,op:rank}]}"
  ]
  "62" [
    label = <Filter<br/><font color="grey" point-size="10">IN:</font> rank>;
    tooltip = "[62]&#010;Filter datum[rank]<20"
  ]
  "63" [
    label = <Output<br/><i>concat_1_raw</i><br/><font color="grey" point-size="10">required:</font> false>;
    tooltip = "[63]&#010;Output 64"
  ]
  "65" [
    label = <Output<br/><i>concat_1_main</i><br/><font color="grey" point-size="10">required:</font> false>;
    tooltip = "[65]&#010;Output 66"
  ]
  "67" [
    label = <Identifier<br/><font color="grey" point-size="10">OUT:</font> _vgsid_>;
    tooltip = "[67]&#010;Identifier"
  ]
  "68" [
    label = <Output<br/><i>concat_1_concat_0_raw</i><br/><font color="grey" point-size="10">required:</font> false>;
    tooltip = "[68]&#010;Output 69"
  ]
  "70" [
    label = <Output<br/><i>concat_1_concat_0_main</i><br/><font color="grey" point-size="10">required:</font> true>;
    tooltip = "[70]&#010;Output 71"
  ]
  "72" [
    label = <Identifier<br/><font color="grey" point-size="10">OUT:</font> _vgsid_>;
    tooltip = "[72]&#010;Identifier"
  ]
  "73" [
    label = <Output<br/><i>concat_1_concat_1_raw</i><br/><font color="grey" point-size="10">required:</font> false>;
    tooltip = "[73]&#010;Output 74"
  ]
  "75" [
    label = <Output<br/><i>concat_1_concat_1_main</i><br/><font color="grey" point-size="10">required:</font> true>;
    tooltip = "[75]&#010;Output 76"
  ]
  "77" [
    label = <Identifier<br/><font color="grey" point-size="10">OUT:</font> _vgsid_>;
    tooltip = "[77]&#010;Identifier"
  ]
  "78" [
    label = <Output<br/><i>concat_1_concat_2_raw</i><br/><font color="grey" point-size="10">required:</font> false>;
    tooltip = "[78]&#010;Output 79"
  ]
  "80" [
    label = <Output<br/><i>concat_1_concat_2_main</i><br/><font color="grey" point-size="10">required:</font> true>;
    tooltip = "[80]&#010;Output 81"
  ]

  "43" -> "44" "44" -> "45" "45" -> "46" "46" -> "48" "48" -> "50" "50" -> "51" "51" -> "53" "53" -> "54" "54" -> "56" "56" -> "57" "48" -> "59" "59" -> "60" "60" -> "61" "61" -> "62" "62" -> "63" "63" -> "65" "65" -> "67" "67" -> "68" "68" -> "70" "65" -> "72" "72" -> "73" "73" -> "75" "65" -> "77" "77" -> "78" "78" -> "80"
}
digraph DataFlow {
  rankdir = TB;
  node [shape=record]
    "43" [
    label = <Source<br/><i>data/cars.json</i>>;
    tooltip = "[43]&#010;data/cars.json"
  ]
  "45" [
    label = <WindowTransform<br/><font color="grey" point-size="10">OUT:</font> row_number>;
    tooltip = "[45]&#010;WindowTransform {window:[{as:row_number,op:row_number}]}"
  ]
  "53" [
    label = <FilterInvalid<br/><font color="grey" point-size="10">IN:</font> Horsepower, Miles_per_Gallon>;
    tooltip = "[53]&#010;FilterInvalid {Horsepower:{field:Horsepower,type:quantitative},Miles_per_Gallon:{field:Miles_per_Gallon,type:quantitative}}"
  ]
  "54" [
    label = <Output<br/><i>concat_0_main</i><br/><font color="grey" point-size="10">required:</font> true>;
    tooltip = "[54]&#010;Output 55"
  ]
  "60" [
    label = <Filter>;
    tooltip = "[60]&#010;Filter !(length(data(brush_store))) || (vlSelectionTest(brush_store, datum))"
  ]
  "61" [
    label = <WindowTransform<br/><font color="grey" point-size="10">OUT:</font> rank>;
    tooltip = "[61]&#010;WindowTransform {window:[{as:rank,op:rank}]}"
  ]
  "62" [
    label = <Filter<br/><font color="grey" point-size="10">IN:</font> rank>;
    tooltip = "[62]&#010;Filter datum[rank]<20"
  ]
  "70" [
    label = <Output<br/><i>concat_1_concat_0_main</i><br/><font color="grey" point-size="10">required:</font> true>;
    tooltip = "[70]&#010;Output 71"
  ]
  "75" [
    label = <Output<br/><i>concat_1_concat_1_main</i><br/><font color="grey" point-size="10">required:</font> true>;
    tooltip = "[75]&#010;Output 76"
  ]
  "80" [
    label = <Output<br/><i>concat_1_concat_2_main</i><br/><font color="grey" point-size="10">required:</font> true>;
    tooltip = "[80]&#010;Output 81"
  ]

  "43" -> "45" "45" -> "53" "53" -> "54" "45" -> "60" "60" -> "61" "61" -> "62" "62" -> "75" "75" -> "80" "80" -> "70"
}
{ data: 'concat_0_main', field: 'Cylinders', sort: true }
{ data: 'concat_0_main', field: 'Horsepower' }
{ data: 'concat_0_main', field: 'Miles_per_Gallon' }
{ data: 'concat_1_concat_0_main', field: 'row_number', sort: true }
{ data: 'concat_1_concat_1_main', field: 'row_number', sort: true }
{ data: 'concat_1_concat_2_main', field: 'row_number', sort: true }
{
  "$schema": "https://vega.github.io/schema/vega/v5.json",
  "description": "Drag a rectangular brush to show (first 20) selected points in a table.",
  "background": "white",
  "padding": 5,
  "data": [
    {"name": "brush_store"},
    {
      "name": "source_0",
      "url": "data/cars.json",
      "format": {"type": "json"},
      "transform": [
        {
          "type": "window",
          "params": [null],
          "as": ["row_number"],
          "ops": ["row_number"],
          "fields": [null],
          "sort": {"field": [], "order": []}
        }
      ]
    },
    {
      "name": "data_0",
      "source": "source_0",
      "transform": [
        {
          "type": "filter",
          "expr": "isValid(datum[\"Horsepower\"]) && isFinite(+datum[\"Horsepower\"]) && isValid(datum[\"Miles_per_Gallon\"]) && isFinite(+datum[\"Miles_per_Gallon\"])"
        }
      ]
    },
    {
      "name": "data_1",
      "source": "source_0",
      "transform": [
        {
          "type": "filter",
          "expr": "!(length(data(\"brush_store\"))) || (vlSelectionTest(\"brush_store\", datum))"
        },
        {
          "type": "window",
          "params": [null],
          "as": ["rank"],
          "ops": ["rank"],
          "fields": [null],
          "sort": {"field": [], "order": []}
        },
        {"type": "filter", "expr": "datum[\"rank\"]<20"}
      ]
    }
  ],
  "signals": [
    {"name": "concat_0_width", "value": 200},
    {"name": "concat_0_height", "value": 200},
    {"name": "concat_1_childWidth", "value": 50},
    {"name": "concat_1_concat_0_y_step", "value": 20},
    {
      "name": "concat_1_concat_0_height",
      "update": "bandspace(domain('concat_1_concat_0_y').length, 1, 0.5) * concat_1_concat_0_y_step"
    },
    {"name": "concat_1_concat_1_y_step", "value": 20},
    {
      "name": "concat_1_concat_1_height",
      "update": "bandspace(domain('concat_1_concat_1_y').length, 1, 0.5) * concat_1_concat_1_y_step"
    },
    {"name": "concat_1_concat_2_y_step", "value": 20},
    {
      "name": "concat_1_concat_2_height",
      "update": "bandspace(domain('concat_1_concat_2_y').length, 1, 0.5) * concat_1_concat_2_y_step"
    },
    {
      "name": "unit",
      "value": {},
      "on": [
        {"events": "mousemove", "update": "isTuple(group()) ? group() : unit"}
      ]
    },
    {
      "name": "brush",
      "update": "vlSelectionResolve(\"brush_store\", \"union\")"
    }
  ],
  "layout": {"padding": 20, "bounds": "full", "align": "each"},
  "marks": [
    {
      "type": "group",
      "name": "concat_0_group",
      "style": "cell",
      "encode": {
        "update": {
          "width": {"signal": "concat_0_width"},
          "height": {"signal": "concat_0_height"}
        }
      },
      "signals": [
        {
          "name": "brush_x",
          "value": [],
          "on": [
            {
              "events": {
                "source": "scope",
                "type": "mousedown",
                "filter": [
                  "!event.item || event.item.mark.name !== \"brush_brush\""
                ]
              },
              "update": "[x(unit), x(unit)]"
            },
            {
              "events": {
                "source": "window",
                "type": "mousemove",
                "consume": true,
                "between": [
                  {
                    "source": "scope",
                    "type": "mousedown",
                    "filter": [
                      "!event.item || event.item.mark.name !== \"brush_brush\""
                    ]
                  },
                  {"source": "window", "type": "mouseup"}
                ]
              },
              "update": "[brush_x[0], clamp(x(unit), 0, concat_0_width)]"
            },
            {
              "events": {"signal": "brush_scale_trigger"},
              "update": "[scale(\"concat_0_x\", brush_Horsepower[0]), scale(\"concat_0_x\", brush_Horsepower[1])]"
            },
            {
              "events": {"signal": "brush_translate_delta"},
              "update": "clampRange(panLinear(brush_translate_anchor.extent_x, brush_translate_delta.x / span(brush_translate_anchor.extent_x)), 0, concat_0_width)"
            },
            {
              "events": {"signal": "brush_zoom_delta"},
              "update": "clampRange(zoomLinear(brush_x, brush_zoom_anchor.x, brush_zoom_delta), 0, concat_0_width)"
            },
            {
              "events": [{"source": "scope", "type": "dblclick"}],
              "update": "[0, 0]"
            }
          ]
        },
        {
          "name": "brush_Horsepower",
          "on": [
            {
              "events": {"signal": "brush_x"},
              "update": "brush_x[0] === brush_x[1] ? null : invert(\"concat_0_x\", brush_x)"
            }
          ]
        },
        {
          "name": "brush_y",
          "value": [],
          "on": [
            {
              "events": {
                "source": "scope",
                "type": "mousedown",
                "filter": [
                  "!event.item || event.item.mark.name !== \"brush_brush\""
                ]
              },
              "update": "[y(unit), y(unit)]"
            },
            {
              "events": {
                "source": "window",
                "type": "mousemove",
                "consume": true,
                "between": [
                  {
                    "source": "scope",
                    "type": "mousedown",
                    "filter": [
                      "!event.item || event.item.mark.name !== \"brush_brush\""
                    ]
                  },
                  {"source": "window", "type": "mouseup"}
                ]
              },
              "update": "[brush_y[0], clamp(y(unit), 0, concat_0_height)]"
            },
            {
              "events": {"signal": "brush_scale_trigger"},
              "update": "[scale(\"concat_0_y\", brush_Miles_per_Gallon[0]), scale(\"concat_0_y\", brush_Miles_per_Gallon[1])]"
            },
            {
              "events": {"signal": "brush_translate_delta"},
              "update": "clampRange(panLinear(brush_translate_anchor.extent_y, brush_translate_delta.y / span(brush_translate_anchor.extent_y)), 0, concat_0_height)"
            },
            {
              "events": {"signal": "brush_zoom_delta"},
              "update": "clampRange(zoomLinear(brush_y, brush_zoom_anchor.y, brush_zoom_delta), 0, concat_0_height)"
            },
            {
              "events": [{"source": "scope", "type": "dblclick"}],
              "update": "[0, 0]"
            }
          ]
        },
        {
          "name": "brush_Miles_per_Gallon",
          "on": [
            {
              "events": {"signal": "brush_y"},
              "update": "brush_y[0] === brush_y[1] ? null : invert(\"concat_0_y\", brush_y)"
            }
          ]
        },
        {
          "name": "brush_scale_trigger",
          "value": {},
          "on": [
            {
              "events": [{"scale": "concat_0_x"}, {"scale": "concat_0_y"}],
              "update": "(!isArray(brush_Horsepower) || (+invert(\"concat_0_x\", brush_x)[0] === +brush_Horsepower[0] && +invert(\"concat_0_x\", brush_x)[1] === +brush_Horsepower[1])) && (!isArray(brush_Miles_per_Gallon) || (+invert(\"concat_0_y\", brush_y)[0] === +brush_Miles_per_Gallon[0] && +invert(\"concat_0_y\", brush_y)[1] === +brush_Miles_per_Gallon[1])) ? brush_scale_trigger : {}"
            }
          ]
        },
        {
          "name": "brush_tuple",
          "on": [
            {
              "events": [
                {"signal": "brush_Horsepower || brush_Miles_per_Gallon"}
              ],
              "update": "brush_Horsepower && brush_Miles_per_Gallon ? {unit: \"concat_0\", fields: brush_tuple_fields, values: [brush_Horsepower,brush_Miles_per_Gallon]} : null"
            }
          ]
        },
        {
          "name": "brush_tuple_fields",
          "value": [
            {"field": "Horsepower", "channel": "x", "type": "R"},
            {"field": "Miles_per_Gallon", "channel": "y", "type": "R"}
          ]
        },
        {
          "name": "brush_translate_anchor",
          "value": {},
          "on": [
            {
              "events": [
                {
                  "source": "scope",
                  "type": "mousedown",
                  "markname": "brush_brush"
                }
              ],
              "update": "{x: x(unit), y: y(unit), extent_x: slice(brush_x), extent_y: slice(brush_y)}"
            }
          ]
        },
        {
          "name": "brush_translate_delta",
          "value": {},
          "on": [
            {
              "events": [
                {
                  "source": "window",
                  "type": "mousemove",
                  "consume": true,
                  "between": [
                    {
                      "source": "scope",
                      "type": "mousedown",
                      "markname": "brush_brush"
                    },
                    {"source": "window", "type": "mouseup"}
                  ]
                }
              ],
              "update": "{x: brush_translate_anchor.x - x(unit), y: brush_translate_anchor.y - y(unit)}"
            }
          ]
        },
        {
          "name": "brush_zoom_anchor",
          "on": [
            {
              "events": [
                {
                  "source": "scope",
                  "type": "wheel",
                  "consume": true,
                  "markname": "brush_brush"
                }
              ],
              "update": "{x: x(unit), y: y(unit)}"
            }
          ]
        },
        {
          "name": "brush_zoom_delta",
          "on": [
            {
              "events": [
                {
                  "source": "scope",
                  "type": "wheel",
                  "consume": true,
                  "markname": "brush_brush"
                }
              ],
              "force": true,
              "update": "pow(1.001, event.deltaY * pow(16, event.deltaMode))"
            }
          ]
        },
        {
          "name": "brush_modify",
          "on": [
            {
              "events": {"signal": "brush_tuple"},
              "update": "modify(\"brush_store\", brush_tuple, true)"
            }
          ]
        }
      ],
      "marks": [
        {
          "name": "brush_brush_bg",
          "type": "rect",
          "clip": true,
          "encode": {
            "enter": {
              "fill": {"value": "#333"},
              "fillOpacity": {"value": 0.125}
            },
            "update": {
              "x": [
                {
                  "test": "data(\"brush_store\").length && data(\"brush_store\")[0].unit === \"concat_0\"",
                  "signal": "brush_x[0]"
                },
                {"value": 0}
              ],
              "y": [
                {
                  "test": "data(\"brush_store\").length && data(\"brush_store\")[0].unit === \"concat_0\"",
                  "signal": "brush_y[0]"
                },
                {"value": 0}
              ],
              "x2": [
                {
                  "test": "data(\"brush_store\").length && data(\"brush_store\")[0].unit === \"concat_0\"",
                  "signal": "brush_x[1]"
                },
                {"value": 0}
              ],
              "y2": [
                {
                  "test": "data(\"brush_store\").length && data(\"brush_store\")[0].unit === \"concat_0\"",
                  "signal": "brush_y[1]"
                },
                {"value": 0}
              ]
            }
          }
        },
        {
          "name": "concat_0_marks",
          "type": "symbol",
          "style": ["point"],
          "interactive": true,
          "from": {"data": "data_0"},
          "encode": {
            "update": {
              "opacity": {"value": 0.7},
              "fill": {"value": "transparent"},
              "stroke": [
                {
                  "test": "!(length(data(\"brush_store\"))) || (vlSelectionTest(\"brush_store\", datum))",
                  "scale": "color",
                  "field": "Cylinders"
                },
                {"value": "grey"}
              ],
              "x": {"scale": "concat_0_x", "field": "Horsepower"},
              "y": {"scale": "concat_0_y", "field": "Miles_per_Gallon"}
            }
          }
        },
        {
          "name": "brush_brush",
          "type": "rect",
          "clip": true,
          "encode": {
            "enter": {"fill": {"value": "transparent"}},
            "update": {
              "x": [
                {
                  "test": "data(\"brush_store\").length && data(\"brush_store\")[0].unit === \"concat_0\"",
                  "signal": "brush_x[0]"
                },
                {"value": 0}
              ],
              "y": [
                {
                  "test": "data(\"brush_store\").length && data(\"brush_store\")[0].unit === \"concat_0\"",
                  "signal": "brush_y[0]"
                },
                {"value": 0}
              ],
              "x2": [
                {
                  "test": "data(\"brush_store\").length && data(\"brush_store\")[0].unit === \"concat_0\"",
                  "signal": "brush_x[1]"
                },
                {"value": 0}
              ],
              "y2": [
                {
                  "test": "data(\"brush_store\").length && data(\"brush_store\")[0].unit === \"concat_0\"",
                  "signal": "brush_y[1]"
                },
                {"value": 0}
              ],
              "stroke": [
                {
                  "test": "brush_x[0] !== brush_x[1] && brush_y[0] !== brush_y[1]",
                  "value": "white"
                },
                {"value": null}
              ]
            }
          }
        }
      ],
      "axes": [
        {
          "scale": "concat_0_x",
          "orient": "bottom",
          "gridScale": "concat_0_y",
          "grid": true,
          "tickCount": {"signal": "ceil(concat_0_width/40)"},
          "domain": false,
          "labels": false,
          "maxExtent": 0,
          "minExtent": 0,
          "ticks": false,
          "zindex": 0
        },
        {
          "scale": "concat_0_y",
          "orient": "left",
          "gridScale": "concat_0_x",
          "grid": true,
          "tickCount": {"signal": "ceil(concat_0_height/40)"},
          "domain": false,
          "labels": false,
          "maxExtent": 0,
          "minExtent": 0,
          "ticks": false,
          "zindex": 0
        },
        {
          "scale": "concat_0_x",
          "orient": "bottom",
          "grid": false,
          "title": "Horsepower",
          "labelFlush": true,
          "labelOverlap": true,
          "tickCount": {"signal": "ceil(concat_0_width/40)"},
          "zindex": 0
        },
        {
          "scale": "concat_0_y",
          "orient": "left",
          "grid": false,
          "title": "Miles_per_Gallon",
          "labelOverlap": true,
          "tickCount": {"signal": "ceil(concat_0_height/40)"},
          "zindex": 0
        }
      ],
      "legends": [
        {
          "stroke": "color",
          "symbolType": "circle",
          "title": "Cylinders",
          "encode": {
            "symbols": {
              "update": {
                "fill": {"value": "transparent"},
                "opacity": {"value": 0.7}
              }
            }
          }
        }
      ]
    },
    {
      "type": "group",
      "name": "concat_1_group",
      "layout": {"padding": 20, "bounds": "full", "align": "each"},
      "marks": [
        {
          "type": "group",
          "name": "concat_1_concat_0_group",
          "title": {"text": "Horsepower", "frame": "group"},
          "style": "cell",
          "encode": {
            "update": {
              "width": {"signal": "concat_1_childWidth"},
              "height": {"signal": "concat_1_concat_0_height"}
            }
          },
          "marks": [
            {
              "name": "concat_1_concat_0_marks",
              "type": "text",
              "style": ["text"],
              "interactive": false,
              "from": {"data": "data_1"},
              "encode": {
                "update": {
                  "fill": {"value": "black"},
                  "x": {"signal": "concat_1_childWidth", "mult": 0.5},
                  "y": {"scale": "concat_1_concat_0_y", "field": "row_number"},
                  "text": {
                    "signal": "isValid(datum[\"Horsepower\"]) ? datum[\"Horsepower\"] : \"\"+datum[\"Horsepower\"]"
                  },
                  "align": {"value": "center"},
                  "baseline": {"value": "middle"}
                }
              }
            }
          ]
        },
        {
          "type": "group",
          "name": "concat_1_concat_1_group",
          "title": {"text": "MPG", "frame": "group"},
          "style": "cell",
          "encode": {
            "update": {
              "width": {"signal": "concat_1_childWidth"},
              "height": {"signal": "concat_1_concat_1_height"}
            }
          },
          "marks": [
            {
              "name": "concat_1_concat_1_marks",
              "type": "text",
              "style": ["text"],
              "interactive": false,
              "from": {"data": "data_1"},
              "encode": {
                "update": {
                  "fill": {"value": "black"},
                  "x": {"signal": "concat_1_childWidth", "mult": 0.5},
                  "y": {"scale": "concat_1_concat_1_y", "field": "row_number"},
                  "text": {
                    "signal": "isValid(datum[\"Miles_per_Gallon\"]) ? datum[\"Miles_per_Gallon\"] : \"\"+datum[\"Miles_per_Gallon\"]"
                  },
                  "align": {"value": "center"},
                  "baseline": {"value": "middle"}
                }
              }
            }
          ]
        },
        {
          "type": "group",
          "name": "concat_1_concat_2_group",
          "title": {"text": "Origin", "frame": "group"},
          "style": "cell",
          "encode": {
            "update": {
              "width": {"signal": "concat_1_childWidth"},
              "height": {"signal": "concat_1_concat_2_height"}
            }
          },
          "marks": [
            {
              "name": "concat_1_concat_2_marks",
              "type": "text",
              "style": ["text"],
              "interactive": false,
              "from": {"data": "data_1"},
              "encode": {
                "update": {
                  "fill": {"value": "black"},
                  "x": {"signal": "concat_1_childWidth", "mult": 0.5},
                  "y": {"scale": "concat_1_concat_2_y", "field": "row_number"},
                  "text": {
                    "signal": "isValid(datum[\"Origin\"]) ? datum[\"Origin\"] : \"\"+datum[\"Origin\"]"
                  },
                  "align": {"value": "center"},
                  "baseline": {"value": "middle"}
                }
              }
            }
          ]
        }
      ]
    }
  ],
  "scales": [
    {
      "name": "color",
      "type": "ordinal",
      "domain": {"data": "data_0", "field": "Cylinders", "sort": true},
      "range": "ordinal",
      "interpolate": "hcl"
    },
    {
      "name": "concat_0_x",
      "type": "linear",
      "domain": {"data": "data_0", "field": "Horsepower"},
      "range": [0, {"signal": "concat_0_width"}],
      "nice": true,
      "zero": true
    },
    {
      "name": "concat_0_y",
      "type": "linear",
      "domain": {"data": "data_0", "field": "Miles_per_Gallon"},
      "range": [{"signal": "concat_0_height"}, 0],
      "nice": true,
      "zero": true
    },
    {
      "name": "concat_1_concat_0_y",
      "type": "point",
      "domain": {"data": "data_1", "field": "row_number", "sort": true},
      "range": {"step": {"signal": "concat_1_concat_0_y_step"}},
      "padding": 0.5
    },
    {
      "name": "concat_1_concat_1_y",
      "type": "point",
      "domain": {"data": "data_1", "field": "row_number", "sort": true},
      "range": {"step": {"signal": "concat_1_concat_1_y_step"}},
      "padding": 0.5
    },
    {
      "name": "concat_1_concat_2_y",
      "type": "point",
      "domain": {"data": "data_1", "field": "row_number", "sort": true},
      "range": {"step": {"signal": "concat_1_concat_2_y_step"}},
      "padding": 0.5
    }
  ]
}
